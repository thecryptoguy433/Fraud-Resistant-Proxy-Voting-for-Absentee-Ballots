(define-constant ERR-NOT-AUTHORIZED (err u100))
(define-constant ERR-VOTE-ALREADY-CAST (err u101))
(define-constant ERR-INVALID-ELECTION (err u102))
(define-constant ERR-ELECTION-CLOSED (err u103))
(define-constant ERR-INVALID-PROXY (err u104))
(define-constant ERR-INVALID-VOTER (err u105))
(define-constant ERR-INVALID-BALLOT (err u106))
(define-constant ERR-ELECTION-NOT-STARTED (err u107))
(define-constant ERR-PROXY-REVOKED (err u108))
(define-constant ERR-VOTE-NOT-ALLOWED (err u109))
(define-constant ERR-INVALID-DELEGATION (err u110))
(define-constant ERR-AUDIT-NOT-AUTHORIZED (err u111))
(define-constant ERR-INVALID-TIMESTAMP (err u112))
(define-constant ERR-MAX-VOTES-EXCEEDED (err u113))
(define-constant ERR-INVALID-OPTION (err u114))
(define-constant ERR-ELECTION-FINALIZED (err u115))
(define-constant ERR-PROXY-NOT-ASSIGNED (err u116))
(define-constant ERR-INVALID-PROOF (err u117))
(define-constant ERR-INSUFFICIENT-BALANCE (err u118))
(define-constant ERR-TRANSFER-FAILED (err u119))
(define-constant ERR-INVALID-AMOUNT (err u120))

(define-data-var election-active bool true)
(define-data-var election-start uint u0)
(define-data-var election-end uint u0)
(define-data-var max-votes-per-voter uint u1)
(define-data-var vote-fee uint u10)
(define-data-var admin principal tx-sender)

(define-map Votes { election-id: uint, voter: principal } { option: uint, timestamp: uint, proxy: (optional principal) })
(define-map Proxies { voter: principal } { proxy: principal, delegated-at: uint, revoked: bool, proof-hash: (buff 32) })
(define-map VoterEligibility { voter: principal } { eligible: bool, votes-cast: uint })
(define-map ElectionOptions uint (list 10 uint))
(define-map ElectionTallies { election-id: uint, option: uint } uint)
(define-map AuditLogs uint { action: (string-ascii 50), actor: principal, timestamp: uint })
(define-map Delegations { delegation-id: uint } { voter: principal, proxy: principal, proof-hash: (buff 32) })
(define-map ElectionConfigs uint { start: uint, end: uint, active: bool, finalized: bool })
(define-map VoterBalances principal uint)

(define-read-only (get-vote (election-id uint) (voter principal))
  (map-get? Votes { election-id: election-id, voter: voter })
)

(define-read-only (get-proxy (voter principal))
  (map-get? Proxies { voter: voter })
)

(define-read-only (get-voter-eligibility (voter principal))
  (map-get? VoterEligibility { voter: voter })
)

(define-read-only (get-election-options (election-id uint))
  (map-get? ElectionOptions election-id)
)

(define-read-only (get-election-tally (election-id uint) (option uint))
  (default-to u0 (map-get? ElectionTallies { election-id: election-id, option: option }))
)

(define-read-only (get-audit-log (log-id uint))
  (map-get? AuditLogs log-id)
)

(define-read-only (get-delegation (delegation-id uint))
  (map-get? Delegations { delegation-id: delegation-id })
)

(define-read-only (get-election-config (election-id uint))
  (map-get? ElectionConfigs election-id)
)

(define-read-only (get-voter-balance (voter principal))
  (default-to u0 (map-get? VoterBalances voter))
)

(define-private (is-admin (caller principal))
  (is-eq caller (var-get admin))
)

(define-private (is-election-active (election-id uint))
  (let ((config (unwrap! (get-election-config election-id) false)))
    (and (get active config) (>= block-height (get start config)) (<= block-height (get end config)) (not (get finalized config)))
  )
)

(define-private (validate-option (election-id uint) (option uint))
  (is-some (index-of? (unwrap! (get-election-options election-id) false) option))
)

(define-private (validate-proxy (voter principal) (proxy principal))
  (let ((proxy-info (unwrap! (get-proxy voter) false)))
    (and (is-eq (get proxy proxy-info) proxy) (not (get revoked proxy-info)))
  )
)

(define-private (log-audit (action (string-ascii 50)) (actor principal))
  (map-set AuditLogs (+ (map-size AuditLogs) u1) { action: action, actor: actor, timestamp: block-height })
  true
)

(define-private (increment-tally (election-id uint) (option uint))
  (map-set ElectionTallies { election-id: election-id, option: option }
    (+ u1 (get-election-tally election-id option))
  )
)

(define-private (update-votes-cast (voter principal))
  (let ((eligibility (unwrap! (get-voter-eligibility voter) (err ERR-INVALID-VOTER))))
    (map-set VoterEligibility { voter: voter }
      (merge eligibility { votes-cast: (+ u1 (get votes-cast eligibility)) })
    )
  )
)

(define-private (transfer-fee (amount uint) (from principal) (to principal))
  (try! (stx-transfer? amount from to))
)

(define-public (set-admin (new-admin principal))
  (begin
    (asserts! (is-admin tx-sender) (err ERR-NOT-AUTHORIZED))
    (var-set admin new-admin)
    (log-audit "set-admin" tx-sender)
    (ok true)
  )
)

(define-public (configure-election (election-id uint) (start uint) (end uint) (options (list 10 uint)))
  (begin
    (asserts! (is-admin tx-sender) (err ERR-NOT-AUTHORIZED))
    (asserts! (> start block-height) (err ERR-INVALID-TIMESTAMP))
    (asserts! (> end start) (err ERR-INVALID-TIMESTAMP))
    (map-set ElectionConfigs election-id { start: start, end: end, active: true, finalized: false })
    (map-set ElectionOptions election-id options)
    (log-audit "configure-election" tx-sender)
    (ok true)
  )
)

(define-public (assign-proxy (voter principal) (proxy principal) (proof-hash (buff 32)))
  (let ((delegation-id (+ (map-size Delegations) u1)))
  (asserts! (is-eq tx-sender voter) (err ERR-NOT-AUTHORIZED))
  (asserts! (not (is-some (get-proxy voter))) (err ERR-INVALID-PROXY))
  (map-set Proxies { voter: voter } { proxy: proxy, delegated-at: block-height, revoked: false, proof-hash: proof-hash })
    (map-set Delegations { delegation-id: delegation-id } { voter: voter, proxy: proxy, proof-hash: proof-hash })
    (log-audit "assign-proxy" tx-sender)
    (ok delegation-id)
  )
)

(define-public (revoke-proxy (voter principal))
  (begin
    (asserts! (is-eq tx-sender voter) (err ERR-NOT-AUTHORIZED))
    (asserts! (is-some (get-proxy voter)) (err ERR-PROXY-NOT-ASSIGNED))
    (map-set Proxies { voter: voter } (merge (unwrap-panic (get-proxy voter)) { revoked: true }))
    (log-audit "revoke-proxy" tx-sender)
    (ok true)
  )
)

(define-public (register-voter (voter principal))
  (begin
    (asserts! (is-admin tx-sender) (err ERR-NOT-AUTHORIZED))
    (asserts! (is-none (map-get? VoterEligibility { voter: voter })) (err ERR-INVALID-VOTER))
    (map-set VoterEligibility { voter: voter } { eligible: true, votes-cast: u0 })
    (log-audit "register-voter" tx-sender)
    (ok true)
  )
)

(define-public (cast-vote (election-id uint) (option uint) (voter principal))
  (let ((eligibility (unwrap! (get-voter-eligibility voter) (err ERR-INVALID-VOTER))))
  (asserts! (get eligible eligibility) (err ERR-INVALID-VOTER))
  (asserts! (is-election-active election-id) (err ERR-ELECTION-CLOSED))
  (asserts! (< (get votes-cast eligibility) (var-get max-votes-per-voter)) (err ERR-MAX-VOTES-EXCEEDED))
  (asserts! (validate-option election-id option) (err ERR-INVALID-OPTION))
  (asserts! (is-none (get-vote election-id voter)) (err ERR-VOTE-ALREADY-CAST))
    (try! (transfer-fee (var-get vote-fee) tx-sender (var-get admin)))
    (map-set Votes { election-id: election-id, voter: voter } { option: option, timestamp: block-height, proxy: none })
    (increment-tally election-id option)
    (update-votes-cast voter)
    (log-audit "cast-vote" tx-sender)
    (ok true)
  )
)

(define-public (cast-proxy-vote (election-id uint) (option uint) (voter principal) (proof-hash (buff 32)))
  (let ((eligibility (unwrap! (get-voter-eligibility voter) (err ERR-INVALID-VOTER))))
    (asserts! (get eligible eligibility) (err ERR-INVALID-VOTER))
    (asserts! (is-election-active election-id) (err ERR-ELECTION-CLOSED))
    (asserts! (< (get votes-cast eligibility) (var-get max-votes-per-voter)) (err ERR-MAX-VOTES-EXCEEDED))
    (asserts! (validate-option election-id option) (err ERR-INVALID-OPTION))
    (asserts! (is-none (get-vote election-id voter)) (err ERR-VOTE-ALREADY-CAST))
    (asserts! (validate-proxy voter tx-sender) (err ERR-INVALID-PROXY))
    (let ((proxy-info (unwrap! (get-proxy voter) (err ERR-INVALID-PROXY))))
      (asserts! (is-eq (get proof-hash proxy-info) proof-hash) (err ERR-INVALID-PROOF))
    )
    (try! (transfer-fee (var-get vote-fee) tx-sender (var-get admin)))
    (map-set Votes { election-id: election-id, voter: voter } { option: option, timestamp: block-height, proxy: (some tx-sender) })
    (increment-tally election-id option)
    (update-votes-cast voter)
    (log-audit "cast-proxy-vote" tx-sender)
    (ok true)
  )
)

 ;; removed broken find-delegation helper - proof-hash is stored on Proxies now

(define-public (finalize-election (election-id uint))
  (begin
    (asserts! (is-admin tx-sender) (err ERR-NOT-AUTHORIZED))
    (let ((config (unwrap! (get-election-config election-id) (err ERR_INVALID_ELECTION))))
      (asserts! (> block-height (get end config)) (err ERR_ELECTION_CLOSED))
      (asserts! (not (get finalized config)) (err ERR_ELECTION_FINALIZED))
      (map-set ElectionConfigs election-id (merge config { finalized: true, active: false }))
      (log-audit "finalize-election" tx-sender)
      (ok true)
    )
  )
)

(define-public (set-vote-fee (new-fee uint))
  (begin
    (asserts! (is-admin tx-sender) (err ERR-NOT-AUTHORIZED))
    (asserts! (> new-fee u0) (err ERR-INVALID-AMOUNT))
    (var-set vote-fee new-fee)
    (log-audit "set-vote-fee" tx-sender)
    (ok true)
  )
)

(define-public (deposit-balance (amount uint))
  (begin
    (asserts! (> amount u0) (err ERR_INVALID_AMOUNT))
    (try! (stx-transfer? amount tx-sender (as-contract tx-sender)))
    (map-set VoterBalances tx-sender (+ amount (get-voter-balance tx-sender)))
    (log-audit "deposit-balance" tx-sender)
    (ok true)
  )
)

(define-public (withdraw-balance (amount uint))
  (begin
    (asserts! (>= (get-voter-balance tx-sender) amount) (err ERR_INSUFFICIENT-BALANCE))
    (try! (as-contract (stx-transfer? amount tx-sender tx-sender)))
    (map-set VoterBalances tx-sender (- (get-voter-balance tx-sender) amount))
    (log-audit "withdraw-balance" tx-sender)
    (ok true)
  )
)